# import '/graphql/fragments/media_entry.graphql'

query MediaEntry($mediaId: Int, $userId: Int) {
    MediaList(mediaId: $mediaId, userId: $userId) {
        ...MediaListEntry
        user {
            id
            mediaListOptions {
                scoreFormat
            }
        }
    }
}

mutation SaveMediaListEntry(
    $id: Int
    $mediaId: Int
    $status: MediaListStatus
    $score: Float
    $scoreRaw: Int
    $progress: Int
    $progressVolumes: Int
    $repeat: Int
    $priority: Int
    $private: Boolean
    $notes: String
    $hiddenFromStatusLists: Boolean
    $customLists: [String]
    $advancedScores: [Float]
    $startedAt: FuzzyDateInput
    $completedAt: FuzzyDateInput
) {
    SaveMediaListEntry(
        id: $id
        mediaId: $mediaId
        status: $status
        score: $score
        scoreRaw: $scoreRaw
        progress: $progress
        progressVolumes: $progressVolumes
        repeat: $repeat
        priority: $priority
        private: $private
        notes: $notes
        hiddenFromStatusLists: $hiddenFromStatusLists
        customLists: $customLists
        advancedScores: $advancedScores
        startedAt: $startedAt
        completedAt: $completedAt
    ) {
        ...MediaListEntry
    }
}

mutation DeleteMediaListEntry($id: Int) {
    DeleteMediaListEntry(id: $id) {
        deleted
    }
}


fragment MediaListEntry on MediaList {
    id
    mediaId
    status
    updatedAt
    status
    progress
    progressVolumes
    priority
    notes
    hiddenFromStatusLists
    private
    repeat
    score
    customLists(asArray: true)
    startedAt {
        ...FuzzyDate
    }
    completedAt {
        ...FuzzyDate
    }
    media {
        ...MediaFragment
        episodes
        chapters
        status(version: 2)
        averageScore
        popularity
        startDate {
            ...FuzzyDate
        }
    }
}

fragment MediaFragment on Media {
    id
    type
    isAdult
    genres
    format
    description(asHtml: false)
    title {
        userPreferred
    }
    coverImage {
        extraLarge
    }
}


